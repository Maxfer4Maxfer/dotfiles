"-------General--------"
set nocompatible		            " be iMproved, required
set mouse=a                         " Enable mouse support
"let mapleader = ','		        " The default leader is '\', but a comma is much better
":cabbrev help tab help             " Open help in a separate tab.      
set number			                " Let's activate line numbers
set relativenumber                  " Set relative nubmers
set ruler
set backspace=indent,eol,start      " Make backspace behave like every other editors
set noerrorbells visualbell t_vb=   " No dump bells!
set autowriteall                    " Automatically write the file when switching buffers
set autowrite                       " Write any changes
" Write any changes when the user hasn't pressed a key for 'updatetime' milliseconds
autocmd CursorHold * silent! update         " Autosave
autocmd TextChanged,TextChangedI <buffer> silent write
" autocmd FocusGained,BufEnter * :silent! !   " Autoread 
set updatetime=100                  " Update each 100 milliseconds
set undofile                        " Save changes in the undofile. Even after reopen a file you can do undo things
set undodir=~/.vim/undo
set wildmode=list:longest,full      " Show suggestions while hit <tab> in a command mode
set path=.,,**                      " Find a file in the directory of the current file or the current directory, recursively
set directory^=~/.vim/swaps         " Set the directory where all swaps filesliv
set textwidth=0                     " Stop wrapping text
set wrapmargin=0                    " Stop wrapping text
set wrap!                           " Unset wrapping lines
:filetype plugin on                 " Enable file type detection

"--------Plugins--------"
" https://github.com/junegunn/vim-plug/wiki/tips#automatic-installation
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
Plug 'tpope/vim-commentary'
Plug 'chrisbra/csv.vim'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim', { 'do': { -> fzf#install() } }
Plug 'python-mode/python-mode', { 'for': 'python', 'branch': 'develop' }
Plug 'altercation/vim-colors-solarized'
Plug 'airblade/vim-gitgutter'
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
Plug 'lyokha/vim-xkbswitch'
call plug#end()

"--------Color theme--------"
" Setup an initial color theme
if !exists("first_start") 
    let first_start = "true"
    let g:solarized_termtrans=1     " Show currect terminal's colors
    syntax enable
    set background=dark
    colorscheme solarized
endif 

map <F5> :set background=light<CR>:let g:solarized_termtrans=0<CR>:colorscheme solarized<CR>:source ~/.vimrc<CR>
map <F6> :set background=dark<CR>:let g:solarized_termtrans=1<CR>:colorscheme solarized<CR>:source ~/.vimrc<CR>

if exists('$TMUX')
    let &t_SI = "\<Esc>Ptmux;\<Esc>\e[6 q\<Esc>\\" "SI = INSERT mode
    let &t_EI = "\<Esc>Ptmux;\<Esc>\e[4 q\<Esc>\\" "SR = REPLACE mode
    let &t_EI = "\<Esc>Ptmux;\<Esc>\e[2 q\<Esc>\\" "EI = NORMAL mode (ELSE)

    " let &t_SI = "\e[6 q" "SI = INSERT mode
    " let &t_SR = "\e[4 q" "SR = REPLACE mode
    " let &t_EI = "\e[2 q" "EI = NORMAL mode (ELSE)
else
    let &t_SI = "\e[6 q" "SI = INSERT mode
    let &t_SR = "\e[4 q" "SR = REPLACE mode
    let &t_EI = "\e[2 q" "EI = NORMAL mode (ELSE)
endif


highlight VertSplit ctermbg=NONE                " Color of vertical split color
set fillchars+=vert:â”‚                           " Shape of vertical split

highlight LineNr ctermbg=NONE           " Set a color of a left colunm
highlight SignColumn ctermbg=NONE       " Set a color of a sign colunm
highlight TabLine ctermbg=NONE          " Set a color of a sign colunm
highlight TabLineSel ctermbg=NONE       " Set a color of a sign colunm
highlight TabLineFill ctermbg=NONE      " Set a color of a sign colunm

highlight StatusLineTerm cterm=reverse ctermfg=14 ctermbg=0             " Status line of a terminal window
highlight StatusLineTermNC cterm=reverse ctermfg=11 ctermbg=0           " Status line of a terminal window

highlight GitGutterAdd ctermbg=NONE ctermfg=2
highlight GitGutterChange ctermbg=NONE ctermfg=3
highlight GitGutterDelete ctermbg=NONE ctermfg=9

"--------Search--------"
set hlsearch
set incsearch
set ignorecase

"--------Tabs--------"
:set tabstop=4
:set softtabstop=4
:set shiftwidth=4
:set expandtab      " Expand tab to spaces


"--------Windows--------"
set splitright
set splitbelow
" Position the (global) quickfix window at the very bottom of the window
" (useful for making sure that it appears underneath splits)
" 
" NOTE: Using a check here to make sure that window-specific location-lists
" aren't effected, as they use the same `FileType` as quickfix-lists.
 autocmd FileType qf if (getwininfo(win_getid())[0].loclist != 1) | wincmd J | endif


"--------Mappings--------"
" Make it easy to edit the Vimrc file.
nmap <Leader>ev :tabedit $MYVIMRC<CR>
nmap <Leader>es :e ~/.vim/snippets<CR>
nmap <Leader>ep :e ~/.vim/plugins<CR>

nmap <Leader><space> :nohlsearch<CR> " Add simple highlight removal.



"--------Plugins--------"
"/
"/ vim-auto-save
"/
let g:auto_save = 1         " Enable AutoSave on Vim startup
let g:auto_save_silent = 1  " Do not display the auto-save notification
"/
"/ netrw
"/
let g:netrw_banner = 0          " No header spam in directory mode
let g:netrw_liststyle = 3       " Tree style

"/
"/ fzf.vim
"/
let g:fzf_command_prefix = "Fzf"            " Add namespace for fzf.vim exported commands
let g:fzf_preview_window = ''               " Empty value to disable preview window altogether

nnoremap <silent> <leader>ff :FzfFiles<CR>
nnoremap <silent> <leader>fF :FzfFiles!<CR>
nnoremap <silent> <leader>fb :FzfBuffers<CR>
nnoremap <silent> <leader>fg :FzfGFiles<CR>
nnoremap <silent> <leader>fc :FzfCommands<CR>
nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)


"/
"/ vim-xkbswitch
"/
let g:XkbSwitchEnabled = 1
" keymap=russian-jcukenwin


"/
"/ vim-go
"/
let g:go_fmt_command = "goimports"
let g:go_fmt_autosave = 1                                   " Apply fmt to the current file and go.mod
let g:go_mod_fmt_autosave = 1                               " Apply fmt to the current file and go.mod
let g:go_decls_mode = 'fzf'
let g:go_list_type = "quickfix"
let g:go_auto_type_info = 1                                 " Show info of the object under the curson in status bar
let g:go_auto_sameids = 0                                   " Highlighting the same objects
let g:go_snippet_case_type = "camelcase"                    " Set the camelcase output for snippets
let g:go_updatetime=100                                     " Set update interval to 100ms
let g:go_debug_log_output = 'debugger'                      " Set debugger output
" let g:go_debug = ["shell-commands", "debugger-state"]

" Metalinter
"let g:go_metalinter_command = "golangci-lint run --print-issued-lines=false --build-tags --exclude-use-default=false --enable-all"
"let g:syntastic_go_gometalinter_args = ['--enable-all', '--enable=errcheck']
let g:go_metalinter_enabled = ['wsl']
let g:go_metalinter_autosave = 0

" Syntax
let g:go_highlight_extra_types = 1                          " Highlight commonly used library types (`io.Reader`, etc.). >
let g:go_highlight_operators = 1                            " Highlight operators such as `:=` , `==`, `-=`, etc.
let g:go_highlight_functions = 1                            " Highlight function and method declarations.
let g:go_highlight_function_parameters = 1                  " Highlight the variable names in parameters (including named return parameters) in function declarations.
let g:go_highlight_function_calls = 1                       " Highlight function and method calls.
let g:go_highlight_types = 1                                " Highlight struct and interface names.
let g:go_highlight_fields = 1                               " Highlight struct field names.
let g:go_highlight_build_constraints = 1                    " Highlights build constraints.
let g:go_highlight_generate_tags = 1                        " Highlight go:generate directives.
let g:go_highlight_variable_declarations = 1                " Highlight variable names in variable declarations (`x` in ` x :=`).
let g:go_highlight_variable_assignments = 1                 " Highlight variable names in variable assignments (`x` in `x =`).

" Mapping
let g:go_def_mapping_enabled = 1                             " Enable the default mapping
autocmd FileType go nmap <leader>gcp :cprevious<CR>
autocmd FileType go nmap <leader>gcn :cnext<CR>
autocmd FileType go nmap <leader>gcc :cclose<CR>
autocmd FileType go nmap <leader>gb  <Plug>(go-build)<CR>
autocmd FileType go nmap <leader>gr  <Plug>(go-run)<CR>
autocmd FileType go nmap <leader>gde <Plug>(go-debug)<CR>
autocmd FileType go nmap <leader>gdv <Plug>(go-def-vertical)<CR>
autocmd FileType go nmap <leader>gdt <Plug>(go-def-type)<CR>
autocmd FileType go nmap <leader>gdi <Plug>(go-implements)<CR>
autocmd FileType go nmap <leader>gdd :GoDoc<CR>
autocmd FileType go nmap <leader>gt  :GoDecls<CR>
autocmd FileType go nmap <leader>gss :GoSameIdsClear<CR>:GoSameIds<CR>
autocmd FileType go nmap <leader>gsc :GoSameIdsClear<CR>

"--------Auto-Commands--------"
"Automatically source the Vimrc file on save.
augroup autosourcing
	autocmd!
	autocmd BufWritePost .vimrc source %
augroup END


" Notes and Tips
" zz    center the line where the cursor is located
" ZZ    quit :q
" di(   delete inside ()
" ai(   delete and edit inside ()
" :wa   save all files
" <S-j> join lines
" yiw   yank inner word
" 
"
" Visual mode
" s     start edit
" vit   select everything inside tags
" <S-<> untend 
" <S->  intend
" 
" Splits
" :sp       horisontal split
" :vsp      vertical split
" <C-w>|    expand current split
" <C-w>=    normalize splits
" <C-w>o        current buffer full screen
" 
" 
" Tab managment
" gT        go to previous tab
" gt        go to next tab
" {i}gt     go to tab in position i
"
"
" Search
" :grep -R "" .
" :copen
"
"
" Buffers
" :bufdo bd!    close every buffer
" <C-^>         back to a previous buffer
" :b{i}         go to buffer i
" :sbuffer{i}   open buffer i in split 
"
"
" Completeon
" <C-n>             suggestion dropdown 
" <C-n><C-n>        cycle trought a suggestion dropdown
" set complet       show completeon settings (. current file
"                                             w all open window
"                                             b loaded buffer
"                                             u unloaded buffer)
"
" Folds
" za            open all folds
" zo            open current fold
" zc            close fold
"
"
" Surround
" cs'"      change surround ' to "
" ds"       delete surround "
" S<tag>    surround text with tag
